// File: logic/RuleReplacer.kt
// This file contains the logic for applying replacement rules to a formula's syntax tree.

package com.elsoft.whatthewff.logic


/**
 * A singleton object that handles the application of replacement rules.
 */
object RuleReplacer {

    /**
     * The main public function. It takes a syntax tree and a rule, and returns a list
     * of all possible new trees that can be generated by applying the rule at any
     * valid point within the original tree.
     *
     * @param rule The replacement rule to apply.
     * @param rootNode The root of the formula syntax tree to transform.
     * @return A list of new FormulaNode trees, each representing a valid transformation.
     */
    fun apply(rule: ReplacementRule, rootNode: FormulaNode): List<FormulaNode> {
        return when (rule) {
            ReplacementRule.DEMORGANS_THEOREM -> applyDeMorgans(rootNode)
            ReplacementRule.COMMUTATION -> applyCommutation(rootNode)
        }
    }

    /**
     * Recursively applies DeMorgan's Theorem to a given node and all its children.
     * Rule 1: ¬(P ∧ Q) ⇔ (¬P ∨ ¬Q)
     * Rule 2: ¬(P ∨ Q) ⇔ (¬P ∧ ¬Q)
     */
    private fun applyDeMorgans(node: FormulaNode): List<FormulaNode> {
        val possibleNewTrees = mutableListOf<FormulaNode>()

        // 1. Apply the rule at the CURRENT node, if possible.
        // This involves checking for all four possible patterns (both rules, both directions).

        // Form 1: ¬(P ∧ Q)  ->  (¬P ∨ ¬Q)
        if (node is FormulaNode.UnaryOpNode && node.operator.symbol == "¬" &&
            node.child is FormulaNode.BinaryOpNode &&
            node.child.operator.symbol == "∧") {
                val innerAndNode = node.child
                val p = innerAndNode.left
                val q = innerAndNode.right
                val notP = FormulaNode.UnaryOpNode(AvailableTiles.not, p)
                val notQ = FormulaNode.UnaryOpNode(AvailableTiles.not, q)
                possibleNewTrees.add(FormulaNode.BinaryOpNode(AvailableTiles.or, notP, notQ))
        }

        // Form 2: (¬P ∨ ¬Q)  ->  ¬(P ∧ Q)
        if (node is FormulaNode.BinaryOpNode && node.operator.symbol == "∨" &&
            node.left is FormulaNode.UnaryOpNode && node.left.operator.symbol == "¬" &&
            node.right is FormulaNode.UnaryOpNode && node.right.operator.symbol == "¬") {
                val p = node.left.child
                val q = node.right.child
                val innerAndNode = FormulaNode.BinaryOpNode(AvailableTiles.and, p, q)
                possibleNewTrees.add(FormulaNode.UnaryOpNode(AvailableTiles.not, innerAndNode))
        }

        // Form 3: ¬(P ∨ Q)  ->  (¬P ∧ ¬Q)
        if (node is FormulaNode.UnaryOpNode && node.operator.symbol == "¬" &&
            node.child is FormulaNode.BinaryOpNode && node.child.operator.symbol == "∨") {
                val innerOrNode = node.child
                val p = innerOrNode.left
                val q = innerOrNode.right
                val notP = FormulaNode.UnaryOpNode(AvailableTiles.not, p)
                val notQ = FormulaNode.UnaryOpNode(AvailableTiles.not, q)
                possibleNewTrees.add(FormulaNode.BinaryOpNode(AvailableTiles.and, notP, notQ))
        }

        // Form 4: (¬P ∧ ¬Q)  ->  ¬(P ∨ Q)
        if (node is FormulaNode.BinaryOpNode && node.operator.symbol == "∧" &&
            node.left is FormulaNode.UnaryOpNode && node.left.operator.symbol == "¬" &&
            node.right is FormulaNode.UnaryOpNode && node.right.operator.symbol == "¬") {
                val p = node.left.child
                val q = node.right.child
                val innerOrNode = FormulaNode.BinaryOpNode(AvailableTiles.or, p, q)
                possibleNewTrees.add(FormulaNode.UnaryOpNode(AvailableTiles.not, innerOrNode))
        }

        // 2. Recursively apply the rule to all CHILDREN nodes.
        when (node) {
            is FormulaNode.UnaryOpNode -> {
                applyDeMorgans(node.child).forEach { possibleNewTrees.add(node.copy(child = it)) }
            }
            is FormulaNode.BinaryOpNode -> {
                applyDeMorgans(node.left).forEach { possibleNewTrees.add(node.copy(left = it)) }
                applyDeMorgans(node.right).forEach { possibleNewTrees.add(node.copy(right = it)) }
            }
            is FormulaNode.VariableNode -> { /* No children to recurse into */ }
        }

        return possibleNewTrees
    }

    /**
     * Recursively applies the Commutation rule to a given node and all its children.
     * Commutation: (P ∧ Q) ⇔ (Q ∧ P)  and  (P ∨ Q) ⇔ (Q ∨ P)
     */
    private fun applyCommutation(node: FormulaNode): List<FormulaNode> {
        val possibleNewTrees = mutableListOf<FormulaNode>()

        // 1. Apply the rule at the CURRENT node, if possible.
        if (node is FormulaNode.BinaryOpNode && (node.operator.symbol == "∧" || node.operator.symbol == "∨")) {
            // Create the commuted version of this node by swapping left and right children.
            val commutedNode = node.copy(left = node.right, right = node.left)
            possibleNewTrees.add(commutedNode)
        }

        // 2. Recursively apply the rule to all CHILDREN nodes and rebuild the current node.
        when (node) {
            is FormulaNode.UnaryOpNode -> {
                // Get all possible transformations of the child.
                val childTransforms = applyCommutation(node.child)
                // For each transformed child, create a new version of the parent UnaryOpNode.
                childTransforms.forEach { txChild ->
                    possibleNewTrees.add(node.copy(child = txChild))
                }
            }
            is FormulaNode.BinaryOpNode -> {
                // Get all possible transformations of the left child.
                applyCommutation(node.left).forEach { txLeft ->
                    possibleNewTrees.add(node.copy(left = txLeft))
                }

                // Get all possible transformations of the right child.
                applyCommutation(node.right).forEach { txRight ->
                    possibleNewTrees.add(node.copy(right = txRight))
                }
            }
            is FormulaNode.VariableNode -> {
                // A variable has no children, so do nothing.
            }
        }

        return possibleNewTrees
    }
}
